from NewtonRapshon.barras import *
parar = False
def imprimir2(n, x, fx, j, j1, t):
    parar = False
    bv(1)
    espacios(3)
    bv(1)
    formatNum(x[0])
    bv(1)
    formatNum(fx[0])
    bv(1)
    formatNum(j[0][0])
    bv(1)
    formatNum(j[0][1])
    bv(1)
    formatNum(j1[0][0])
    bv(1)
    formatNum(j1[0][1])
    bv(1)
    espacios(10)
    bv(1)
    print()
    bv(1)
    formatN(n)
    bv(1)
    espacios(10)
    bv(1)
    espacios(10)
    biiv(1)
    bh(10)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bidv(1)
    bh(10)
    bv(1)
    formatNum(t)
    bv(1)
    print()
    bv(1)
    espacios(3)
    bv(1)
    formatNum(x[1])
    bv(1)
    formatNum(fx[1])
    bv(1)
    formatNum(j[1][0])
    bv(1)
    formatNum(j[1][1])
    bv(1)
    formatNum(j1[1][0])
    bv(1)
    formatNum(j1[1][1])
    bv(1)
    espacios(10)
    bv(1)
    print()
    biiv(1)
    bh(3)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bidv(1)
    print()
    return parar

def imprimir3(n, x, fx, j, j1, t):
    parar = False
    bv(1)
    espacios(3)
    bv(1)
    formatNum(x[0])
    bv(1)
    formatNum(fx[0])
    bv(1)
    formatNum(j[0][0])
    bv(1)
    formatNum(j[0][1])
    bv(1)
    formatNum(j[0][2])
    bv(1)
    formatNum(j1[0][0])
    bv(1)
    formatNum(j1[0][1])
    bv(1)
    formatNum(j[0][2])
    bv(1)
    espacios(10)
    bv(1)
    print()
    bv(1)
    espacios(3)
    bv(1)
    espacios(10)
    bv(1)
    espacios(10)
    biiv(1)
    bh(10)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bidv(1)
    bh(10)
    bv(1)
    espacios(10)
    bv(1)
    print()
    bv(1)
    formatN(n)
    bv(1)
    formatNum(x[1])
    bv(1)
    formatNum(fx[1])
    bv(1)
    formatNum(j[1][0])
    bv(1)
    formatNum(j[1][1])
    bv(1)
    formatNum(j[1][2])
    bv(1)
    formatNum(j1[1][0])
    bv(1)
    formatNum(j1[1][1])
    bv(1)
    formatNum(j[1][2])
    bv(1)
    formatNum(t)
    bv(1)
    print()
    bv(1)
    espacios(3)
    bv(1)
    espacios(10)
    bv(1)
    espacios(10)
    biiv(1)
    bh(10)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bidv(1)
    bh(10)
    bv(1)
    espacios(10)
    bv(1)
    print()
    bv(1)
    espacios(3)
    bv(1)
    formatNum(x[2])
    bv(1)
    formatNum(fx[2])
    bv(1)
    formatNum(j[2][0])
    bv(1)
    formatNum(j[2][1])
    bv(1)
    formatNum(j[2][2])
    bv(1)
    formatNum(j1[2][0])
    bv(1)
    formatNum(j1[2][1])
    bv(1)
    formatNum(j[2][2])
    bv(1)
    espacios(10)
    bv(1)
    print()
    biiv(1)
    bh(3)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bidv(1)
    print()
    return parar

def formatN(n):
    if(n<10):
        espacios(1)
        print(n, end="")
        espacios(1)
    elif(n<100):
        espacios(1)
        print(n, end="")
    elif(n<1000):
        print(n, end="")
    else:
        desborde(3)

def formatNum(val):
    if(val>0):
        if(val<10):
            print("{0:.8f}".format(val), end="")
        elif(val<100):
            print("{0:.7f}".format(val), end="")
        elif(val<1000):
            print("{0:.6f}".format(val), end="")
        elif(val<10000):
            print("{0:.5f}".format(val), end="")
        elif(val<100000):
            print("{0:.4f}".format(val), end="")
        elif(val<1000000):
            print("{0:.3f}".format(val), end="")
        elif(val<10000000):
            print("{0:.2f}".format(val), end="")
        elif(val<100000000):
            print("{0:.1f}".format(val), end="")
        else:
            desborde(10)
            parar = True
    elif(val<0):
        if(val>-10):
            print("{0:.7f}".format(val), end="")
        elif(val>-100):
            print("{0:.6f}".format(val), end="")
        elif(val>-1000):
            print("{0:.5f}".format(val), end="")
        elif(val>-10000):
            print("{0:.4f}".format(val), end="")
        elif(val>-100000):
            print("{0:.3f}".format(val), end="")
        elif(val>-1000000):
            print("{0:.2f}".format(val), end="")
        elif(val>-10000000):
            print("{0:.1f}".format(val), end="")
        else:
            desborde(10)
            parar = True
    else:
        cadena = str("{0:.8f}".format(val))
        cont = 0
        for i in cadena:
            print(i, end="")
            cont+=1
            if(cont==10):
                break

def cabeceraS1():
    bv(1)
    espacios(31)
    print("ƒ1(x,y)=x²+xy-10=0", end="")
    espacios(31)
    bv(1)
    print()
    bv(1)
    espacios(31)
    print("ƒ2(x,y)=y+3xy²-50=0", end="")
    espacios(30)
    bv(1)
    print()
    biiv(1)
    bh(3)
    bsih(1)
    bh(10)
    bsih(1)
    bh(10)
    bsih(1)
    bh(21)
    bsih(1)
    bh(21)
    bsih(1)
    bh(10)
    bidv(1)
    print()
    bv(1)
    espacios(1)
    print("n", end="")
    espacios(1)
    bv(1)
    espacios(5)
    print("X", end="")
    espacios(4)
    bv(1)
    espacios(3)
    print("F(X)", end="")
    espacios(3)
    bv(1)
    espacios(8)
    print("J(X)", end="")
    espacios(9)
    bv(1)
    espacios(7)
    print("J¯¹(X)", end="")
    espacios(8)
    bv(1)
    print("Tolerancia", end="")
    bv(1)
    print()
    biiv(1)
    bh(3)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bsih(1)
    bh(10)
    bii(1)
    bh(10)
    bsih(1)
    bh(10)
    bii(1)
    bh(10)
    bidv(1)
    print()

def cabeceraS2():
    bv(1)
    espacios(31)
    print("ƒ1(x,y)=x²+y²-9=0", end="")
    espacios(32)
    bv(1)
    print()
    bv(1)
    espacios(31)
    print("ƒ2(x,y)=-ex-2y-3=0", end="")
    espacios(31)
    bv(1)
    print()
    biiv(1)
    bh(3)
    bsih(1)
    bh(10)
    bsih(1)
    bh(10)
    bsih(1)
    bh(21)
    bsih(1)
    bh(21)
    bsih(1)
    bh(10)
    bidv(1)
    print()
    bv(1)
    espacios(1)
    print("n", end="")
    espacios(1)
    bv(1)
    espacios(5)
    print("X", end="")
    espacios(4)
    bv(1)
    espacios(3)
    print("F(X)", end="")
    espacios(3)
    bv(1)
    espacios(8)
    print("J(X)", end="")
    espacios(9)
    bv(1)
    espacios(7)
    print("J¯¹(X)", end="")
    espacios(8)
    bv(1)
    print("Tolerancia", end="")
    bv(1)
    print()
    biiv(1)
    bh(3)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bsih(1)
    bh(10)
    bii(1)
    bh(10)
    bsih(1)
    bh(10)
    bii(1)
    bh(10)
    bidv(1)
    print()

def cabeceraS3():
    bv(1)
    espacios(36)
    print("ƒ1(x,y,z)=2x²-4x+y²+3z²+6z+2=0", end="")
    espacios(36)
    bv(1)
    print()
    bv(1)
    espacios(38)
    print("ƒ2(x,y,z)=x²+y²-2y+2z²-5=0", end="")
    espacios(38)
    bv(1)
    print()
    bv(1)
    espacios(37)
    print("ƒ3(x,y,z)=3x²-12x+y²-3z²+8=0", end="")
    espacios(37)
    bv(1)
    print()
    biiv(1)
    bh(3)
    bsih(1)
    bh(10)
    bsih(1)
    bh(10)
    bsih(1)
    bh(32)
    bsih(1)
    bh(32)
    bsih(1)
    bh(10)
    bidv(1)
    print()
    bv(1)
    espacios(1)
    print("n", end="")
    espacios(1)
    bv(1)
    espacios(5)
    print("X", end="")
    espacios(4)
    bv(1)
    espacios(3)
    print("F(X)", end="")
    espacios(3)
    bv(1)
    espacios(14)
    print("J(X)", end="")
    espacios(14)
    bv(1)
    espacios(13)
    print("J¯¹(X)", end="")
    espacios(13)
    bv(1)
    print("Tolerancia", end="")
    bv(1)
    print()
    biiv(1)
    bh(3)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bsih(1)
    bh(10)
    bsih(1)
    bh(10)
    bii(1)
    bh(10)
    bsih(1)
    bh(10)
    bsih(1)
    bh(10)
    bii(1)
    bh(10)
    bidv(1)
    print()

def cabeceraS4():
    bv(1)
    espacios(41)
    print("ƒ1(x,y,z)=x²-4x+y²=0", end="")
    espacios(41)
    bv(1)
    print()
    bv(1)
    espacios(39)
    print("ƒ2(x,y,z)=x²-x+-12y+1=0", end="")
    espacios(40)
    bv(1)
    print()
    bv(1)
    espacios(37)
    print("ƒ3(x,y,z)=3x²-12x+y²-3z²+8=0", end="")
    espacios(37)
    bv(1)
    print()
    biiv(1)
    bh(3)
    bsih(1)
    bh(10)
    bsih(1)
    bh(10)
    bsih(1)
    bh(32)
    bsih(1)
    bh(32)
    bsih(1)
    bh(10)
    bidv(1)
    print()
    bv(1)
    espacios(1)
    print("n", end="")
    espacios(1)
    bv(1)
    espacios(5)
    print("X", end="")
    espacios(4)
    bv(1)
    espacios(3)
    print("F(X)", end="")
    espacios(3)
    bv(1)
    espacios(14)
    print("J(X)", end="")
    espacios(14)
    bv(1)
    espacios(13)
    print("J¯¹(X)", end="")
    espacios(13)
    bv(1)
    print("Tolerancia", end="")
    bv(1)
    print()
    biiv(1)
    bh(3)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bii(1)
    bh(10)
    bsih(1)
    bh(10)
    bsih(1)
    bh(10)
    bii(1)
    bh(10)
    bsih(1)
    bh(10)
    bsih(1)
    bh(10)
    bii(1)
    bh(10)
    bidv(1)
    print()

def cabMet2():
    esi(1)
    bh(80)
    esd(1)
    print()
    bv(1)
    espacios(28)
    print("MÉTODO DE NEWTON-RAPSHON", end="")
    espacios(28)
    bv(1)
    print()
    biiv(1)
    bh(80)
    bidv(1)
    print()

def cabMet3():
    esi(1)
    bh(102)
    esd(1)
    print()
    bv(1)
    espacios(39)
    print("MÉTODO DE NEWTON-RAPSHON", end="")
    espacios(39)
    bv(1)
    print()
    biiv(1)
    bh(102)
    bidv(1)
    print()

def foter2():
    eii(1)
    bh(3)
    biih(1)
    bh(10)
    biih(1)
    bh(10)
    biih(1)
    bh(10)
    biih(1)
    bh(10)
    biih(1)
    bh(10)
    biih(1)
    bh(10)
    biih(1)
    bh(10)
    eid(1)
    sl(1)

def foter3():
    eii(1)
    bh(3)
    biih(1)
    bh(10)
    biih(1)
    bh(10)
    biih(1)
    bh(10)
    biih(1)
    bh(10)
    biih(1)
    bh(10)
    biih(1)
    bh(10)
    biih(1)
    bh(10)
    biih(1)
    bh(10)
    biih(1)
    bh(10)
    eid(1)
    sl(1)
